---
# References:
# https://medium.com/swlh/the-easiest-way-to-start-using-swagger-in-node-js-54326864e74f
# https://www.youtube.com/watch?v=mj_Qe2jBYS4
# https://github.com/habibis007/swagger-jwt-authentication
# https://medium.com/@hksalaudeen/simple-implementation-of-jwt-authorisation-scheme-with-swagger-docs-a99b1839e05b

openapi: 3.0.3
info:
  title: Simple Node.js API
  description: A simple Nodejs API containing basic CRUD operations for file read/write, database connections, file upload, and more.
  version: 1.0.0

servers:
  - url: http://localhost:8000
    description: Local API server

tags:
  # - name: books
  #   description: Operations related to books
  - name: Authorization
    description: Operations related to JWT token based authentication
  - name: uploadFile
    description: Operations related to uploading files using multer
  - name: todo
    description: Database operations related to todos using knexjs

paths:
  /login:
    post:
      tags:
        - Authorization
      summary: "Returns Authorization Token"
      description: "Authorizes default users with username and password set as root to use the endpoints"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
          example:
            email: "user@root.com"
            password: "root"
      produces:
        - application/json
      responses:
        200:
          description: "Successful Login"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
                  token:
                    type: string
              example:
                id: 1
                email: "user@root.com"
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImpvaG5AbWFpbC5jb20iLCJwYXNzd29yZCI6IiQyYSQxMCRYUHBGT0p1QWFJeVcwaXloYUNoeXkuMnJlQkMzZ05ySS5ndkVLc3pTZGV3TDAvcVpFTkZpbSIsImlhdCI6MTY4MDg3NDkyNCwiZXhwIjoxNjgwODc4NTI0fQ.fjt9i_Z3dVSxBytx8vmP7CjzeR2XWOlAUAcu"
        400:
          description: "Input field(s) missing"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_Message"
        404:
          description: "Incorrect username or password!"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_Message"

  /uploadFile:
    summary: Upload files using multer
    get:
      tags:
        - uploadFile
      summary: Display the html page containing the form to upload file.
      responses:
        200:
          description: Successful Operation.
          # content:
          #   text/html:
          #     schema:
          #       type: object
          #       properties:
          #         title:
          #           type: string
        default:
          description: Unknown Error

    post:
      tags:
        - uploadFile
      summary: Upload a file to server. Note - File size limited to 2MB.
      requestBody:
        description: The file to be uploaded
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                myFile:
                  type: string
                  format: binary

      responses:
        201:
          description: Successful Operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  fieldname:
                    type: string
                  originalname:
                    type: string
                  encoding:
                    type: string
                  mimetype:
                    type: string
                  destination:
                    type: string
                  filename:
                    type: string
                  path:
                    type: string
                  size:
                    type: integer
        400:
          description: Incorrect file format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_Message"
        default:
          description: Unknown Error

  /todo:
    get:
      tags:
        - todo
      summary: Get all the todos
      responses:
        200:
          description: Successful Todo list fetching
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Todo"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        default:
          description: Unknown Error

    post:
      tags:
        - todo
      summary: Create a todo
      requestBody:
        description: Fields to create todo
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Todo_Without_ID"
      responses:
        201:
          description: Successful Todo Creation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_Message"
        400:
          description: Incorrect input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_Message"
        500:
          description: Internal Server Error
        default:
          description: Unknown Error

  /todo/{id}:
    get:
      tags:
        - todo
      summary: Get a single Todo
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the todo
          schema:
            type: integer
      responses:
        200:
          description: Successful Single Todo fetching
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        404:
          description: Incorrect input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_Message"
        500:
          description: Internal Server Error
        default:
          description: Unknown Error

    patch:
      tags:
        - todo
      summary: Update todo description only
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the todo to update
          schema:
            type: integer
      requestBody:
        description: Todo description
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
      responses:
        200:
          description: Successful Todo description update
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_Message"
        400:
          description: Inccomplete input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_Message"
        500:
          description: Internal Server Error
        default:
          description: Unknown Error

    delete:
      tags:
        - todo
      summary: Delete todo
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the todo to delete
          schema:
            type: integer
      responses:
        200:
          description: Successful Todo Deletion
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_Message"
        400:
          description: Inccomplete input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_Message"
        500:
          description: Internal Server Error
        default:
          description: Unknown Error

  /todo/{id}/complete:
    put:
      tags:
        - todo
      summary: Update complete Todo body
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the todo
          schema:
            type: integer
      requestBody:
        description: Fields to update todo
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Todo_Without_ID"
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        400:
          description: Inccomplete input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_Message"
        500:
          description: Internal Server Error
        default:
          description: Unknown Error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # todo object
    Todo:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        completed:
          type: boolean

    Todo_Without_ID:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        completed:
          type: boolean

    Response_Message:
      type: object
      properties:
        message:
          type: string

security:
  - bearerAuth: []
